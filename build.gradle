plugins {
    id 'org.springframework.boot' version '2.6.6'
    // See https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-git-info
    id 'com.gorylenko.gradle-git-properties' version '2.2.2'
}

//See https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/gradle-plugin/reference/html/
apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'

group = 'com.orange.cloud.servicebroker'
version = '0.2.0.BUILD-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    if (!version.endsWith('RELEASE')) {
        maven { url "https://repo.spring.io/milestone" }
    }
}

//See https://spring.io/projects/spring-cloud#adding-spring-cloud-to-an-existing-spring-boot-application
ext {
    set('springCloudVersion', "2021.0.1")
}

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    compile "org.springframework.boot:spring-boot-starter-security"
//    compile "org.springframework.cloud:spring-cloud-starter-sleuth"
//    compile "org.springframework.cloud:spring-cloud-starter-zipkin"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation('org.springframework.security:spring-security-test')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }

}

test {
    // enable JUnit 5
    useJUnitPlatform()

    testLogging {
        // display all the events
        events 'PASSED', 'FAILED', 'SKIPPED'
        // display stdout and stderr
        showStandardStreams = true
    }

    // create a summary after the execution
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }

    // print failed tests after the execution
    def failedTests = []

    afterTest { test, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            failedTests << test
        }
    }

    afterSuite {
        failedTests.each { test -> println "FAILED test: ${test.className} > ${test.name}" }
    }
}
